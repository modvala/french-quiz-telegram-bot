import os
import asyncio
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from fastapi import FastAPI, Request
from aiogram.types import Update

from config import settings

import httpx

# –ó–∞–º–µ–Ω–µ–Ω–æ: –±–µ—Ä—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import settings

# ===== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ =====
class QuizState(StatesGroup):
    active = State()  # –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–≤–∏–∑–∞
    idle = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ / –∫–æ–Ω–µ—Ü
    picking_module = State()  # –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

# –í state –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å:
# {
#   "session_id": "...",
#   "index": 0,
#   "total": 10,
#   "last_question_id": 1,
#   "last_options": ["...", "...", "...", "..."]
# }

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(settings.BOT_TOKEN)  # —É–±—Ä–∞–ª deprecated –∞—Ä–≥—É–º–µ–Ω—Ç parse_mode

# ===== HTTP –∫–ª–∏–µ–Ω—Ç =====
def build_url(path: str) -> str:
    # backend –æ—Ç–¥–∞—ë—Ç /static/... –∏ —Ç.–¥. ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    if path.startswith("http://") or path.startswith("https://"):
        return path
    return settings.API_BASE.rstrip("/") + "/" + path.lstrip("/")


async def api_get(path: str) -> Dict[str, Any]:
	headers = {}
	if settings.API_TOKEN:
		headers["Authorization"] = f"Bearer {settings.API_TOKEN}"
	async with httpx.AsyncClient(timeout=20.0) as client:
		r = await client.get(build_url(path), headers=headers)
		r.raise_for_status()
		return r.json()


async def api_post(path: str, payload: Dict[str, Any]) -> Dict[str, Any]:
	headers = {}
	if settings.API_TOKEN:
		headers["Authorization"] = f"Bearer {settings.API_TOKEN}"
	async with httpx.AsyncClient(timeout=20.0) as client:
		r = await client.post(build_url(path), json=payload, headers=headers)
		r.raise_for_status()
		return r.json()


async def fetch_bytes(url_or_path: Optional[str]) -> Optional[bytes]:
	if not url_or_path:
		return None
	url = build_url(url_or_path)
	headers = {}
	if settings.API_TOKEN:
		headers["Authorization"] = f"Bearer {settings.API_TOKEN}"
	async with httpx.AsyncClient(timeout=30.0) as client:
		r = await client.get(url, headers=headers)
		r.raise_for_status()
		return r.content


# ===== UI helpers =====
def options_keyboard(options: list[dict]) -> InlineKeyboardMarkup:
    # –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏, callback_data –≤–∏–¥–∞ "pick:NUMBER" (1..4)
    rows = []
    row = []
    for option in options:
        number = option.get("number", 1)
        button_text = f"{number}"  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä
        row.append(InlineKeyboardButton(text=button_text, callback_data=f"pick:{number}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)


def restart_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="restart")]
    ])


def next_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")]
    ])


def modules_keyboard(modules: list[dict]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for m in modules:
        title = m.get("title") or m.get("slug")
        slug = m.get("slug")
        row.append(InlineKeyboardButton(text=title, callback_data=f"module:{slug}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def show_modules(chat_id: int, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä."""
    try:
        payload = await api_get("/modules")
        modules = payload.get("modules", [])
    except Exception:
        modules = []

    # –µ—Å–ª–∏ –º–æ–¥—É–ª–µ–π –Ω–µ—Ç/–æ—à–∏–±–∫–∞ ‚Äî –æ—Ç–∫–∞—Ç –∫ –ø–µ—Ä–≤–æ–º—É (legacy)
    if not modules:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º –≤ legacy-—Ä–µ–∂–∏–º–µ –∏ —Å—Ç–∞—Ä—Ç—É–µ–º —Å—Ä–∞–∑—É
        await state.update_data(module_slug=None, module_base="")
        await bot.send_message(chat_id, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).")
        try:
            started = await api_post("/quiz/start", {
                "user_id": str(chat_id),
                "n_questions": settings.N_QUESTIONS
            })
        except Exception:
            await bot.send_message(chat_id, "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        await state.set_state(QuizState.active)
        await state.update_data(
            session_id=started["session_id"],
            index=0,
            total=started.get("total", 0),
        )
        await show_question(chat_id, state)
        return

    await state.set_state(QuizState.picking_module)
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=modules_keyboard(modules))


# ====== –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ ======
async def show_question(chat_id: int, state: FSMContext) -> None:
    data = await state.get_data()
    session_id = data["session_id"]
    index = data["index"]
    module_base = data.get("module_base", "")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "/modules/nationalities" –∏–ª–∏ ""

    # GET /quiz/question/{session_id}/{index}
    q = await api_get(f"{module_base}/quiz/question/{session_id}/{index}")

    # —Å–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await state.update_data(
        last_question_id=q["question_id"],
        last_options=q["options"],
        total=q["total"],
    )

    # —Å–Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if q.get("prompt_audio_url"):
        audio_bytes = await fetch_bytes(q["prompt_audio_url"])
        if audio_bytes:
            await bot.send_audio(
                chat_id,
                types.BufferedInputFile(audio_bytes, filename="question.ogg"),
                caption=f"<b>–í–æ–ø—Ä–æ—Å {q['index']+1}/{q['total']}</b>\n{q['prompt_text']}",
                parse_mode="HTML",
            )
        else:
            await bot.send_message(
                chat_id,
                f"<b>–í–æ–ø—Ä–æ—Å {q['index']+1}/{q['total']}</b>\n{q['prompt_text']}",
                parse_mode="HTML",
            )
    else:
        await bot.send_message(
            chat_id,
            f"<b>–í–æ–ø—Ä–æ—Å {q['index']+1}/{q['total']}</b>\n{q['prompt_text']}",
            parse_mode="HTML",
        )

    # –ù–µ –æ—Ç—Å—ã–ª–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å—Å—è
    # —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å–∞–º–∏.
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–æ–º–µ—Ä–∞) –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞.
    opt_numbers = [str(opt.get("number", i + 1)) for i, opt in enumerate(q.get("options", []))]
    if opt_numbers:
        for opt in q.get("options", []):
            audio_url = opt.get("audio_url")
            if not audio_url:
                continue
            try:
                audio_bytes = await fetch_bytes(audio_url)
            except Exception:
                continue
            if audio_bytes:
                await bot.send_audio(
                    chat_id,
                    types.BufferedInputFile(
                        audio_bytes, filename=f"option_{opt.get('number', 1)}.ogg"
                    ),
                    caption=f"üîä –í–∞—Ä–∏–∞–Ω—Ç {opt.get('number', 1)}",
                )

    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    kb = options_keyboard(q["options"])
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞:", reply_markup=kb)


# ====== START ======
@dp.message(CommandStart())
async def start_cmd(m: types.Message, state: FSMContext):
    await state.clear()
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è
    await show_modules(m.chat.id, state)


@dp.callback_query(F.data.startswith("module:"))
async def choose_module(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    user_id = str(cb.from_user.id)
    slug = cb.data.split(":", 1)[1]

    # —Å—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    module_base = f"/modules/{slug}" if slug else ""

    # –°—Ç–∞—Ä—Ç—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
    try:
        started = await api_post(f"{module_base}/quiz/start", {
            "user_id": user_id,
            "n_questions": settings.N_QUESTIONS
        })
    except Exception as e:
        # –ø–æ–ø—Ä–æ–±—É–µ–º legacy –∫–∞–∫ —Ñ–æ–ª–ª–±–µ–∫, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å
        err_text = str(e)
        if slug:
            try:
                started = await api_post("/quiz/start", {
                    "user_id": user_id,
                    "n_questions": settings.N_QUESTIONS
                })
                # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –≤ legacy —Ä–µ–∂–∏–º–µ
                module_base = ""
            except Exception:
                await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(f"Error starting module {slug} for user {user_id}: {err_text}")
                return
        else:
            await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"Error starting quiz for user {user_id}: {err_text}")
            return

    session_id = started["session_id"]
    await state.set_state(QuizState.active)
    await state.update_data(
        session_id=session_id,
        index=0,
        total=started["total"],
        module_slug=slug,
        module_base=module_base,
    )

    await cb.message.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º!")
    await show_question(cb.message.chat.id, state)


# ====== –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ ======
@dp.callback_query(F.data.startswith("pick:"))
async def pick_option(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()  # –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è

    data = await state.get_data()
    if not data or "session_id" not in data:
        await cb.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    session_id = data["session_id"]
    index = data["index"]
    question_id = data["last_question_id"]
    options = data["last_options"]

    try:
        selected_option_id = int(cb.data.split(":")[1])  # 1..N (–Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏)
    except Exception:
        await cb.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π
    valid_numbers = [opt.get("number", 1) for opt in options]
    if selected_option_id not in valid_numbers:
        await cb.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # POST /quiz/answer
    module_base = data.get("module_base", "")
    ans = await api_post(f"{module_base}/quiz/answer", {
        "session_id": session_id,
        "question_id": question_id,
        "selected_option_id": selected_option_id
    })

    if ans["correct"]:
        # Show country name when answer is correct (if provided)
        country = ans.get("country")
        if country:
            await cb.message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°—Ç—Ä–∞–Ω–∞: <b>{country}</b>, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ans['correct_option_text']}</b>", parse_mode="HTML")
        else:
            await cb.message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ans['correct_option_text']}</b>", parse_mode="HTML")
    else:
        # On incorrect answer show correct answer text and country (if any),
        # and play the correct option audio if available.
        country = ans.get("country")
        if country:
            await cb.message.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ans['correct_option_text']}</b>. –°—Ç—Ä–∞–Ω–∞: <b>{country}</b>",
                parse_mode="HTML",
            )
        else:
            await cb.message.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ans['correct_option_text']}</b>",
                parse_mode="HTML",
            )

        # play correct answer audio if present
        if ans.get("correct_option_audio_url"):
            try:
                audio_bytes = await fetch_bytes(ans["correct_option_audio_url"])
                if audio_bytes:
                    await bot.send_audio(
                        cb.message.chat.id,
                        types.BufferedInputFile(audio_bytes, filename="correct_answer.ogg"),
                        caption=f"üîä {ans['correct_option_text']}",
                    )
            except Exception:
                # non-fatal if playback fails
                pass

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Ç–æ–≥
    if ans["finished"]:
        # GET /quiz/summary/{session_id}
        summary = await api_get(f"{module_base}/quiz/summary/{session_id}")
        await state.set_state(QuizState.idle)
        await cb.message.answer(
            f"üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{summary['correct_count']}</b> –∏–∑ <b>{summary['total']}</b>",
            reply_markup=restart_keyboard(),
            parse_mode="HTML",
        )
        return
    else:
        # –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É, –Ω–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
        await state.update_data(index=index + 1)
        await cb.message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:", reply_markup=next_keyboard())


# ====== –†–µ—Å—Ç–∞—Ä—Ç ======
@dp.callback_query(F.data == "restart")
async def restart(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª—è
    await state.clear()
    await show_modules(cb.message.chat.id, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
@dp.callback_query(F.data == "next")
async def next_question(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    if not data or "session_id" not in data:
        await cb.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    # –µ—Å–ª–∏ –∫–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ—Å—Ç–∞—Ä—Ç
    if data.get("index") is None:
        await cb.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (show_question –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â–∏–π index –∏–∑ state)
    await show_question(cb.message.chat.id, state)

app = FastAPI(title="WordQuiz Bot Webhook")

@app.on_event("startup")
async def _on_startup():
    async with bot:
        await bot.set_webhook(settings.WEBHOOK_URL, drop_pending_updates=True)

@app.on_event("shutdown")
async def _on_shutdown():
    async with bot:
        await bot.delete_webhook(drop_pending_updates=True)

@app.get("/health")
async def health():
    return {"ok": True}

@app.post("/tg/webhook")
async def tg_webhook(request: Request):
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}


# ====== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ======
async def main():
    if not settings.BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is empty. Set it in .env")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
