import os
import asyncio
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from fastapi import FastAPI, Request
from aiogram.types import Update

from config import settings

import httpx

# –ó–∞–º–µ–Ω–µ–Ω–æ: –±–µ—Ä—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import settings

# ===== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ =====
class QuizState(StatesGroup):
    active = State()  # –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–≤–∏–∑–∞
    idle = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ / –∫–æ–Ω–µ—Ü

# –í state –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å:
# {
#   "session_id": "...",
#   "index": 0,
#   "total": 10,
#   "last_question_id": 1,
#   "last_options": ["...", "...", "...", "..."]
# }

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(settings.BOT_TOKEN)  # —É–±—Ä–∞–ª deprecated –∞—Ä–≥—É–º–µ–Ω—Ç parse_mode

# ===== HTTP –∫–ª–∏–µ–Ω—Ç =====
def build_url(path: str) -> str:
    # backend –æ—Ç–¥–∞—ë—Ç /static/... –∏ —Ç.–¥. ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    if path.startswith("http://") or path.startswith("https://"):
        return path
    return settings.API_BASE.rstrip("/") + "/" + path.lstrip("/")


async def api_get(path: str) -> Dict[str, Any]:
	headers = {}
	if settings.API_TOKEN:
		headers["Authorization"] = f"Bearer {settings.API_TOKEN}"
	async with httpx.AsyncClient(timeout=20.0) as client:
		r = await client.get(build_url(path), headers=headers)
		r.raise_for_status()
		return r.json()


async def api_post(path: str, payload: Dict[str, Any]) -> Dict[str, Any]:
	headers = {}
	if settings.API_TOKEN:
		headers["Authorization"] = f"Bearer {settings.API_TOKEN}"
	async with httpx.AsyncClient(timeout=20.0) as client:
		r = await client.post(build_url(path), json=payload, headers=headers)
		r.raise_for_status()
		return r.json()


async def fetch_bytes(url_or_path: Optional[str]) -> Optional[bytes]:
	if not url_or_path:
		return None
	url = build_url(url_or_path)
	headers = {}
	if settings.API_TOKEN:
		headers["Authorization"] = f"Bearer {settings.API_TOKEN}"
	async with httpx.AsyncClient(timeout=30.0) as client:
		r = await client.get(url, headers=headers)
		r.raise_for_status()
		return r.content


# ===== UI helpers =====
def options_keyboard(options: list[dict]) -> InlineKeyboardMarkup:
    # –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏, callback_data –≤–∏–¥–∞ "pick:NUMBER" (1..4)
    rows = []
    row = []
    for option in options:
        number = option.get("number", 1)
        button_text = f"{number}"  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä
        row.append(InlineKeyboardButton(text=button_text, callback_data=f"pick:{number}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)


def restart_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="restart")]
    ])


def next_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")]
    ])


# ====== –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ ======
async def show_question(chat_id: int, state: FSMContext) -> None:
    data = await state.get_data()
    session_id = data["session_id"]
    index = data["index"]

    # GET /quiz/question/{session_id}/{index}
    q = await api_get(f"/quiz/question/{session_id}/{index}")

    # —Å–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await state.update_data(
        last_question_id=q["question_id"],
        last_options=q["options"],
        total=q["total"],
    )

    # —Å–Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if q.get("prompt_audio_url"):
        audio_bytes = await fetch_bytes(q["prompt_audio_url"])
        if audio_bytes:
            await bot.send_audio(
                chat_id,
                types.BufferedInputFile(audio_bytes, filename="question.ogg"),
                caption=f"<b>–í–æ–ø—Ä–æ—Å {q['index']+1}/{q['total']}</b>\n{q['prompt_text']}",
                parse_mode="HTML",
            )
        else:
            await bot.send_message(
                chat_id,
                f"<b>–í–æ–ø—Ä–æ—Å {q['index']+1}/{q['total']}</b>\n{q['prompt_text']}",
                parse_mode="HTML",
            )
    else:
        await bot.send_message(
            chat_id,
            f"<b>–í–æ–ø—Ä–æ—Å {q['index']+1}/{q['total']}</b>\n{q['prompt_text']}",
            parse_mode="HTML",
        )

    # –∑–∞—Ç–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∞—É–¥–∏–æ
    for option in q["options"]:
        number = option.get("number", 1)
        audio_url = option.get("audio_url")
        
        if audio_url:
            audio_bytes = await fetch_bytes(audio_url)
            if audio_bytes:
                await bot.send_audio(
                    chat_id,
                    types.BufferedInputFile(audio_bytes, filename=f"option_{number}.ogg"),
                    caption=f"–í–∞—Ä–∏–∞–Ω—Ç {number}",
                )
            else:
                await bot.send_message(chat_id, f"–í–∞—Ä–∏–∞–Ω—Ç {number}: [–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]")
        else:
            await bot.send_message(chat_id, f"–í–∞—Ä–∏–∞–Ω—Ç {number}: [–Ω–µ—Ç –∞—É–¥–∏–æ]")

    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    kb = options_keyboard(q["options"])
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞:", reply_markup=kb)


# ====== START ======
@dp.message(CommandStart())
async def start_cmd(m: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(m.from_user.id)

    # POST /quiz/start
    try:
        started = await api_post("/quiz/start", {
            "user_id": user_id,
            "n_questions": settings.N_QUESTIONS
        })
    except Exception as e:
        # Handle backend unavailable / HTTP errors gracefully
        err_text = str(e)
        try:
            await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass
        # Log to console as well
        print(f"Error starting quiz for user {user_id}: {err_text}")
        return

    session_id = started["session_id"]
    await state.set_state(QuizState.active)
    await state.update_data(session_id=session_id, index=0, total=started["total"])

    await m.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑!")
    await show_question(m.chat.id, state)


# ====== –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ ======
@dp.callback_query(F.data.startswith("pick:"))
async def pick_option(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()  # –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è

    data = await state.get_data()
    if not data or "session_id" not in data:
        await cb.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    session_id = data["session_id"]
    index = data["index"]
    question_id = data["last_question_id"]
    options = data["last_options"]

    try:
        selected_option_id = int(cb.data.split(":")[1])  # 1..4 (–ø—Ä—è–º–æ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏)
    except Exception:
        await cb.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π
    valid_numbers = [opt.get("number", 1) for opt in options]
    if selected_option_id not in valid_numbers:
        await cb.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    # POST /quiz/answer
    ans = await api_post("/quiz/answer", {
        "session_id": session_id,
        "question_id": question_id,
        "selected_option_id": selected_option_id
    })

    if ans["correct"]:
        await cb.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Äî –ø—Ä–æ–∏–≥—Ä–∞–µ–º
        if ans.get("correct_option_audio_url"):
            audio_bytes = await fetch_bytes(ans["correct_option_audio_url"])
            if audio_bytes:
                await bot.send_audio(
                    cb.message.chat.id,
                    types.BufferedInputFile(audio_bytes, filename="answer.ogg"),
                    caption=f"üîä {ans['correct_option_text']}",
                )
    else:
        await cb.message.answer(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ans['correct_option_text']}</b>",
            parse_mode="HTML",
        )

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Ç–æ–≥
    if ans["finished"]:
        # GET /quiz/summary/{session_id}
        summary = await api_get(f"/quiz/summary/{session_id}")
        await state.set_state(QuizState.idle)
        await cb.message.answer(
            f"üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{summary['correct_count']}</b> –∏–∑ <b>{summary['total']}</b>",
            reply_markup=restart_keyboard(),
            parse_mode="HTML",
        )
        return
    else:
        # –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É, –Ω–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
        await state.update_data(index=index + 1)
        await cb.message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:", reply_markup=next_keyboard())


# ====== –†–µ—Å—Ç–∞—Ä—Ç ======
@dp.callback_query(F.data == "restart")
async def restart(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    await start_cmd(cb.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
@dp.callback_query(F.data == "next")
async def next_question(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    if not data or "session_id" not in data:
        await cb.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    # –µ—Å–ª–∏ –∫–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ—Å—Ç–∞—Ä—Ç
    if data.get("index") is None:
        await cb.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (show_question –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â–∏–π index –∏–∑ state)
    await show_question(cb.message.chat.id, state)

app = FastAPI(title="WordQuiz Bot Webhook")

@app.on_event("startup")
async def _on_startup():
    async with bot:
        await bot.set_webhook(settings.WEBHOOK_URL, drop_pending_updates=True)

@app.on_event("shutdown")
async def _on_shutdown():
    async with bot:
        await bot.delete_webhook(drop_pending_updates=True)

@app.get("/health")
async def health():
    return {"ok": True}

@app.post("/tg/webhook")
async def tg_webhook(request: Request):
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}


# ====== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ======
async def main():
    if not settings.BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is empty. Set it in .env")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
